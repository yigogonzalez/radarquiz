{"version":3,"sources":["Store/GameReducer.js","Store/index.js","Components/Status.js","Components/StartButton.js","Components/Blip.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["random","length","Math","floor","initState","currentBlipIndex","correctCount","count","status","blips","gameTime","reducers","combineReducers","game","state","arguments","undefined","action","type","Object","assign","answer","selectedOption","correctOption","data","store","createStore","applyMiddleware","thunk","Status","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","time","tick","bind","assertThisInitialized","_this2","interval","setInterval","clearInterval","setState","prevState","react_default","a","createElement","className","props","Component","connect","StartButton","value","onClick","dispatch","selectOption","blip","name","ring","Game","timmer","startHandle","console","log","timeout","setTimeout","finish","start","Components_Status","Components_Blip","Components_StartButton","defaultProps","initGame","App","es","Components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6db57ffb.chunk.js","sourcesContent":["const random = length => (Math.floor(Math.random() * length))\nconst initState = {\n  currentBlipIndex: 0,\n  correctCount: 0,\n  count: 0,\n  status: 'initial',\n  blips: [],\n  gameTime: 60,\n}\n\nexport function GameReducer(state = initState, action) {\n  switch (action.type) {\n    case 'GAME_RESET_AND_START':\n      return Object.assign({}, state, {\n        currentBlipIndex: random(state.blips.length),\n        correctCount: 0,\n        count: 0,\n        status: 'playing',\n        answer: '',\n      })\n    case 'GAME_SELECT_OPTION': {\n      let { correctCount, count } = state\n      if (action.selectedOption === action.correctOption) {\n        correctCount += 1\n      }\n      count += 1\n      return Object.assign({}, state, { correctCount, count })\n    }\n    case 'GAME_FINISH': {\n      return Object.assign({}, state, { status: 'finish' })\n    }\n    case 'GAME_SET_NEXT': {\n      return Object.assign({}, state, { currentBlipIndex: random(state.blips.length) })\n    }\n    case 'GAME_INIT':\n      return Object.assign({}, state, { blips: action.data })\n    default:\n      return state\n  }\n}\n\nexport function initGame(store, data) {\n  store.dispatch({ type: 'GAME_INIT', data })\n}","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { GameReducer } from './GameReducer'\n\nconst reducers = combineReducers({\n  game: GameReducer,\n})\nconst store = createStore(reducers, applyMiddleware(thunk))\n\nexport default store\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nclass Status extends Component {\n  constructor() {\n    super()\n    this.state = {\n      time: 60,\n    }\n    this.tick = this.tick.bind(this)\n  }\n\n  componentWillMount() {\n    this.interval = setInterval(() => {\n      this.tick()\n    }, 1000)\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  tick() {\n    this.setState(prevState => ({\n      time: prevState.time > 0 ? prevState.time - 1 : 0,\n    }))\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"fl w-50 tl\">tiempo: {this.state.time}</div>\n        <div className=\"fl w-50 tr\">puntaje: {this.props.correctCount}</div>\n      </div>\n    )\n  }\n}\n\nStatus.propTypes = {\n  correctCount: PropTypes.number.isRequired,\n\n}\n\nconst mapStateToProps = store => ({\n  answer: store.game.answer,\n  gameTime: store.game.gameTime,\n  correctCount: store.game.correctCount,\n})\n\nexport default connect(mapStateToProps, null)(Status)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst StartButton = props => (\n  <input\n    type=\"button\"\n    value=\"Jugar\"\n    className=\"br3 bw2 b--white bg-inherit pa3 mt4 white w-80\"\n    onClick={props.onClick}\n  />\n)\n\nStartButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n}\n\nexport default StartButton\n","import React from 'react'\nimport propTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nconst Blip = props => (\n  <div className=\"vh-100 w-100\">\n    <article className=\"vh-50 dt w-100\">\n      <div className=\"dtc v-mid tc ph3 ph4-l\">\n        <h1>{props.blip.name}</h1>\n      </div>\n    </article>\n    <article className=\"vh-50 dt w-100 tc\">\n      <input className=\"br3 bw2 b--black bg-inherit pa3 mt4 w-90\" type=\"button\" value=\"Adopt\" onClick={() => (props.selectOption('Adopt', props.blip.ring))} />\n      <input className=\"br3 bw2 b--black bg-inherit pa3 mt4 w-90\" type=\"button\" value=\"Trial\" onClick={() => (props.selectOption('Trial', props.blip.ring))} />\n      <input className=\"br3 bw2 b--black bg-inherit pa3 mt4 w-90\" type=\"button\" value=\"Assess\" onClick={() => (props.selectOption('Assess', props.blip.ring))} />\n      <input className=\"br3 bw2 b--black bg-inherit pa3 mt4 w-90\" type=\"button\" value=\"Hold\" onClick={() => (props.selectOption('Hold', props.blip.ring))} />\n    </article>\n  </div>\n)\n\nBlip.propTypes = {\n  blip: propTypes.shape({\n    name: propTypes.string,\n    ring: propTypes.string,\n  }).isRequired,\n  selectOption: propTypes.func.isRequired,\n}\n\nconst mapDispatchToProps = dispatch => ({\n  selectOption: (selectedOption, correctOption) => {\n    dispatch({ type: 'GAME_SELECT_OPTION', selectedOption, correctOption })\n    dispatch({ type: 'GAME_SET_NEXT' })\n  },\n})\n\nexport default connect(null, mapDispatchToProps)(Blip)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Status from './Status'\nimport StartButton from './StartButton'\nimport Blip from './Blip'\n\nclass Game extends Component {\n  constructor() {\n    super()\n    this.timmer = this.timmer.bind(this)\n    this.startHandle = this.startHandle.bind(this)\n  }\n\n  timmer() {\n    console.log('GAME START')\n    this.timeout = setTimeout(() => {\n      this.props.finish()\n    }, this.props.gameTime * 1000)\n  }\n\n  startHandle() {\n    this.timmer()\n    this.props.start()\n  }\n\n  render() {\n    switch (this.props.status) {\n      case 'playing':\n        return (\n          <div className=\"vh-100 w-100\">\n            <div className=\"fixed w-100 pa2\"><Status /></div>\n            <Blip blip={this.props.blips[this.props.currentBlipIndex]} />\n          </div>\n        )\n      case 'finish':\n        return (\n          <article className=\"vh-100 dt w-100 white bg-green\">\n            <div className=\"dtc v-mid tc ph3 ph4-l\">\n              <h1>¡Se acabo el tiempo!</h1>\n              <div className=\"f3 f2-m f-subheadline-l w-100 fw6\">\n                Tu puntaje\n                <div className=\"f2 mt3\">{this.props.correctCount}</div>\n              </div>\n              <StartButton onClick={this.startHandle} />\n            </div>\n          </article>\n        )\n      case 'initial':\n      default:\n        return (\n          <article className=\"vh-100 dt w-100 bg-purple\">\n            <div className=\"dtc v-mid tc white ph3 ph4-l\">\n              <h1>RadarQuiz</h1>\n              <span className=\"f6 f2-m f-subheadline-l fw6\">¿Cuantos blips puedes acertar en 60 segundos?</span>\n              <StartButton onClick={this.startHandle} />\n            </div>\n          </article>\n        )\n    }\n  }\n}\n\nGame.defaultProps = {\n  status: 'initial',\n  currentBlipIndex: 0,\n  gameTime: 60,\n}\n\nGame.propTypes = {\n  status: PropTypes.string,\n  correctCount: PropTypes.number.isRequired,\n  currentBlipIndex: PropTypes.number,\n  blips: PropTypes.arrayOf(PropTypes.object).isRequired,\n  start: PropTypes.func.isRequired,\n  finish: PropTypes.func.isRequired,\n  gameTime: PropTypes.number,\n}\n\nconst mapStateToProps = store => ({\n  status: store.game.status,\n  blips: store.game.blips,\n  correctCount: store.game.correctCount,\n  currentBlipIndex: store.game.currentBlipIndex,\n  gameTime: store.game.gameTime,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  finish: () => {\n    dispatch({ type: 'GAME_FINISH' })\n  },\n  start: () => {\n    dispatch({ type: 'GAME_RESET_AND_START' })\n  },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game)\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport 'tachyons/css/tachyons.min.css'\nimport data from './datasource/blips'\nimport store from './Store'\nimport { initGame } from './Store/GameReducer'\nimport Game from './Components/Game'\nimport './App.css'\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"avenir\">\n      <Game />\n    </div>\n  </Provider>\n)\n\ninitGame(store, data)\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}